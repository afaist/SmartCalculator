type: edu
custom_name: stage8
files:
- name: src/calculator/Main.kt
  visible: true
  text: |
    package calculator

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // tests of functionality of previous steps
                    main.start();

                    // test of /help
                    String output = main.execute("/help").trim();
                    if (output.length() < 4) {
                        return CheckResult.wrong(
                            "It seems like there was no any \"help\" message.");
                    }

                    // input empty string
                    output = main.execute("");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Incorrect response to an empty string. " +
                            "The program should not print anything.");
                    }

                    // testing basic assignment
                    output = main.execute("n = 32");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute("33 + 20 + 11 + 49 - n - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }


                    output = main.execute("c = n \nc = 2");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c  ").trim();
                    if (!output.equals("2")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute("11 - 13 + c").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong(
                            "The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                    if (!output.equals("10")) {
                        return CheckResult.wrong(
                            "The program cannot process " +
                            "multiple operations with several operators.");
                    }

                    // test of a nonexistent command
                    output = main.execute("/start").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong(
                            "The program should print \"Unknown command\" " +
                            "when a nonexistent command is entered.");
                    }

                    // testing invalid variable name
                    output = main.execute("var1 = 1").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The name of variable should contain only Latin letters.");
                    }

                    // testing invalid value
                    output = main.execute("var = 2a").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The value can be an integer number or a value of another variable");
                    }

                    // testing multiple equalization
                    output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle a invalid assignment.");
                    }

                    // testing assignment by unassigned variable
                    output = main.execute("variable = f").trim().toLowerCase();
                    if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                        return CheckResult.wrong(
                            "The program should not allow an assignment by unassigned variable.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // A test suit for multiplication and division
                    main.start();

                    String output = main.execute("4 * 3").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program has problems with multiplication operation.");
                    }

                    output = main.execute("91 / 13").trim();
                    if (!output.equals("7")) {
                        return CheckResult.wrong(
                            "The program has problems with division operation.");
                    }

                    // testing all operators
                    main.execute(" a= 7 \n b =2");
                    output = main.execute("a * 4 / b - (3 - 1)").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // testing priority of parentheses
                    main.start();

                    // expression from the example
                    String output = main.execute(
                        "7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();

                    if (!output.equals("155")) {
                        return CheckResult.wrong(
                            "The program cannot reproduce an example from the task.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // a set of negative tests
                    main.start();

                    // tests with unclosed brackets
                    String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                    String output1 = main.execute("4 + 5)").trim().toLowerCase();
                    if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle an invalid expression.");
                    }

                    // sequence of * test
                    output = main.execute("2 ************ 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"*\" should return \"Invalid expression\".");
                    }

                    // sequence of / test
                    output = main.execute("2 // 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"/\" should return \"Invalid expression\".");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // test suit for the 8th stage with very large numbers
                    main.start();

                    // testing basic assignment
                    String output = main.execute("n = 32000000000000000000");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute(
                        "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                        "49000000000000000000 - 32000000000000000000 - 9000000000000000000 " +
                        "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                    if (!output.equals("-2999999999999999999")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute(
                        "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                        "49000000000000000000 - n - 9000000000000000000 " +
                        "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                    if (!output.equals("-2999999999999999999")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // testing reassignment with big values
                    output = main.execute("c = n \nc = 2000000000000000000000");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c   ").trim();
                    if (!output.equals("2000000000000000000000")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute(
                        "11000000000000000000 - 9000000000000000000 - " +
                        "c + 1998000000000000000000").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute(
                        "5000000000000000000 --- 2000000000000000000 " +
                        "++++++ 4000000000000000000 -- 2000000000000000000 ---- 1000000000000000000").trim();
                    if (!output.equals("10000000000000000000")) {
                        return CheckResult.wrong("The program cannot process multiple " +
                            "operations with several operators.");
                    }

                    // testing all operators, with variables
                    main.execute(" a= 7000000000000000000 \n b =2000000000000000000");
                    output = main.execute("a * 4000000000000000000 / " +
                        "b - (3000000000000000000 - 1000000000000000000)").trim();
                    if (!output.equals("12000000000000000000")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                })

            );
        }
    }
  learner_created: false
- name: src/calculator/Resources.kt
  visible: true
  text: |
    package calculator

    const val PROGRAM_DESCRIPTION = "The program is a calculator."
    val listOperation = listOf('+', '-', '*', '/', '^')
    val regArithmeticExpression = Regex("^[+\\-/(]*\\w+([ ]*[+\\-/*^]+[ /(]*\\w+[)]*)+")
    val regInitVariable = Regex("(^[a-zA-Z]+[ ]*=[+\\- ]*\\d+)")
    val regInitFromVariable = Regex("(^[a-zA-Z]+[ ]*=[ ]*[a-zA-Z]+)")
    val regVariable = Regex("^[a-zA-Z]+")
    val regNumber = "[+-]?\\d+".toRegex()
    val regOperation = "[+\\-*/^]".toRegex()
    val regPriorityThree = "\\^".toRegex()
    val regPriorityTwo = "[*/]".toRegex()
    val regPriorityOne = "[+-]".toRegex()
  learner_created: true
- name: src/calculator/Types.kt
  visible: true
  text: |-
    package calculator

    enum class Types {
        VARIABLE, OPERATION, NUMBER, BRACKET, NONE
    }
  learner_created: true
- name: src/calculator/Queue.kt
  visible: true
  text: |-
    package calculator

    class Queue<T> {
        private var items: MutableList<T> = mutableListOf()
        override fun toString() = items.toString()
        fun toList(): List<T>{
            return items
        }
        fun enqueue(element: T) {
            items.add(element)
        }

        fun enqueueAll(stack: Stack<T>) {
            while (!stack.isEmpty()) {
                items.add(stack.pop()!!)
            }
        }

    }
  learner_created: true
- name: src/calculator/Parsing.kt
  visible: true
  text: |-
    package calculator

    object Parsing {
        private val variablesMap = mutableMapOf<String, String>()

        /**
         * parsing a mathematical expression
         *
         * @param text
         * @return
         */
        fun parseInput(text: String): Array<String>? {
            val input = text.replace("[ ]+".toRegex(), " ").trim()
            when {
                input.matches(regNumber) -> {
                    // Output number
                    println(input)
                }
                input.matches(regVariable) -> {
                    // Output value for variable
                    println(variablesMap[input] ?: "Unknown variable")
                }
                // If a variable is declared
                input.matches(regInitVariable) -> {
                    // variable
                    val (variable, value) = input.split(" *= *".toRegex())
                    variablesMap[variable] = value
                }
                input.matches(regInitFromVariable) -> {
                    val (variable, key) = input.split(" *= *".toRegex())
                    if (variablesMap.containsKey(key)) {
                        variablesMap[variable] = variablesMap[key] ?: "0"
                    } else {
                        throw ExceptionUnknownVariable()
                    }
                }
                input.contains('=') -> {
                    val tokens = input.split(" *= *".toRegex())
                    if (tokens.size > 2) {
                        throw ExceptionInvalidAssignment()
                    } else if (tokens.first().contains("\\d+".toRegex())) {
                        throw ExceptionInvalidIdentifier()
                    } else {
                        throw ExceptionInvalidAssignment()
                    }
                }
                input.matches(regArithmeticExpression) -> {
                    return getTokens(normalize(input))
                }
                else -> {
                    throw ExceptionInvalidExpression()
                }
            }
            return null
        }

        /**
         * additionally processes the parsed arithmetic expression
         *
         * @param namedParts
         * @return
         */
        private fun getTokens(namedParts: MutableList<Pair<String, Types>>): Array<String> {
            val tokens = mutableListOf<String>()
            for (pair in namedParts) {
                when (pair.second) {
                    Types.NUMBER -> tokens.add(pair.first)
                    Types.VARIABLE -> {
                        if (variablesMap.containsKey(pair.first)) {
                            tokens.add(variablesMap[pair.first].toString())
                        } else {
                            throw ExceptionUnknownVariable()
                        }
                    }
                    Types.OPERATION -> {
                        val operation = pair.first
                        if (operation.length == 1) {
                            tokens.add(operation)
                        } else if (operation.matches("[*/]+".toRegex())) {
                            throw IllegalStateException("Invalid expression")
                        } else if (operation.matches(Regex("\\++"))) {
                            tokens.add("+")
                        } else if (operation.matches(Regex("-+"))) {
                            tokens.add(with(operation) { if (count { it == '-' } and 1 == 0) "+" else "-" })
                        } else {
                            throw ExceptionInvalidExpression()
                        }
                    }
                    Types.BRACKET -> {
                        if (pair.first == "(") {
                            tokens.add(pair.first)
                        } else if (pair.first == ")") {
                            if (tokens.count { e -> e == "(" } - tokens.count { e -> e == ")" } >= 1) {
                                tokens.add(pair.first)
                            } else {
                                throw ExceptionInvalidExpression()
                            }
                        }
                    }
                    Types.NONE -> {
                        throw ExceptionInvalidExpression()
                    }
                }
            }
            // Checking the pair of brackets
            if (tokens.count { e -> e == "(" } != tokens.count { e -> e == ")" }) {
                throw ExceptionInvalidExpression()
            }
            return tokens.toTypedArray()
        }

        /**
         * parses the string of an arithmetic expression into its component parts
         *
         * @param input
         * @return
         */
        private fun normalize(input: String): MutableList<Pair<String, Types>> {
            val preTokens = mutableListOf<Pair<String, Types>>()
            var currentType: Types = Types.NONE
            val currentString: StringBuilder = StringBuilder()
            for (symbol in input) {
                when (symbol) {
                    in 'a'..'z', in 'A'..'Z' -> {
                        if (currentType == Types.NUMBER) {
                            throw ExceptionInvalidExpression()
                        }
                        if (currentType != Types.VARIABLE) {
                            if (currentString.isNotEmpty()) {
                                preTokens.add(Pair(currentString.toString(), currentType))
                                currentString.clear()
                            }
                            currentType = Types.VARIABLE
                        }
                        currentString.append(symbol)
                    }
                    in '0'..'9' -> {
                        if (currentType == Types.VARIABLE) {
                            throw ExceptionInvalidExpression()
                        }
                        if (currentType != Types.NUMBER) {
                            if (currentString.isNotEmpty()) {
                                preTokens.add(Pair(currentString.toString(), currentType))
                                currentString.clear()
                            }
                            currentType = Types.NUMBER
                        }
                        currentString.append(symbol)
                    }
                    in listOperation -> {
                        if (currentType == Types.NONE) {
                            if (symbol == '-' || symbol == '+') {
                                // Maybe a signed number
                                currentType = Types.NUMBER
                            }
                        } else if (currentType != Types.OPERATION) {
                            if (currentString.isNotEmpty()) {
                                preTokens.add(Pair(currentString.toString(), currentType))
                                currentString.clear()
                            }
                            currentType = Types.OPERATION
                        }
                        currentString.append(symbol)
                    }
                    '(', ')' -> {
                        if (currentString.isNotEmpty()) {
                            preTokens.add(Pair(currentString.toString(), currentType))
                            currentString.clear()
                        }
                        currentType = Types.BRACKET
                        currentString.append(symbol)
                    }
                }
            }
            if (currentString.isNotEmpty()) {
                preTokens.add(Pair(currentString.toString(), currentType))
            }
            return preTokens
        }
    }
  learner_created: true
- name: src/calculator/Calculator.kt
  visible: true
  text: |-
    package calculator

    import kotlin.math.pow

    /**
     * Calculation class
     *
     */
    class Calculator {
        fun calculate(tokens: Array<String>) {
            postfixToAnswer(infixToPostfix(tokens))
        }

        /**
         * converting an infix record to a postfix record
         *
         * @param tokens
         * @return list of tokens in postfix record
         */
        private fun infixToPostfix(tokens: Array<String>): List<String> {
            val inputStack = Stack<String>()
            val inputQueue = Queue<String>()
            for (token in tokens) {
                when {
                    token.matches(regNumber) -> {
                        inputQueue.enqueue(token)
                    }
                    token == "(" -> {
                        inputStack.push(token)
                    }
                    token == ")" -> {
                        while (inputStack.peek() != "(") {
                            inputQueue.enqueue(inputStack.pop()!!)
                        }
                        inputStack.pop()
                    }
                    token.matches(regPriorityThree) -> {
                        while (inputStack.peek().toString().matches(regPriorityThree)) {
                            inputQueue.enqueue(inputStack.pop()!!)
                        }
                        inputStack.push(token)
                    }
                    token.matches(regPriorityTwo) -> {
                        while (inputStack.peek().toString().matches(regPriorityTwo)) {
                            inputQueue.enqueue(inputStack.pop()!!)
                        }
                        inputStack.push(token)
                    }

                    token.matches(regPriorityOne) -> {
                        while (inputStack.peek().toString().matches(regOperation)) {
                            inputQueue.enqueue(inputStack.pop()!!)
                        }
                        inputStack.push(token)
                    }
                }
            }
            inputQueue.enqueueAll(inputStack)
            return inputQueue.toList()
        }

        /**
         * performs calculations based on a list of numbers and operations
         *
         * @param list of numbers and operations
         */
        private fun postfixToAnswer(list: List<String>) {
            val outputStack = Stack<Double>()
            for (item in list) {
                if (item.matches(regOperation)) {
                    val a = outputStack.pop()
                    val b = outputStack.pop()
                    if (a != null && b != null)
                        outputStack.push(when (item) {
                            "+" -> b + a
                            "-" -> b - a
                            "*" -> b * a
                            "/" -> if (a == 0.0) throw ExceptionInvalidExpression() else b / a
                            "^" -> b.pow(a)
                            else -> throw ExceptionInvalidExpression()
                        })
                } else outputStack.push(item.toDouble())
            }
            outputStack.pop()?.let { println(it.toInt()) }
        }
    }
  learner_created: true
- name: src/calculator/Stack.kt
  visible: true
  text: |-
    package calculator

    class Stack<T> {
        private val elements: MutableList<T> = mutableListOf()
        fun isEmpty() = elements.isEmpty()
        fun push(item: T) = elements.add(item)
        fun pop(): T? {
            val item = elements.lastOrNull()
            if (!isEmpty()) {
                elements.removeAt(elements.size - 1)
            }
            return item
        }

        fun peek(): Any? = elements.lastOrNull()
        override fun toString(): String {
            return elements.toString()
        }

        operator fun contains(t: T) = t in elements

    }
  learner_created: true
- name: src/calculator/Exceptions.kt
  visible: true
  text: |-
    package calculator

    class ExceptionInvalidExpression : Exception("Invalid expression")
    class ExceptionInvalidAssignment: Exception("Invalid assignment")
    class ExceptionUnknownVariable: Exception("Unknown variable")
    class ExceptionInvalidIdentifier: Exception("Invalid identifier")
  learner_created: true
feedback_link: https://hyperskill.org/projects/88/stages/493/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 17 Nov 2021 13:24:30 UTC
record: -1
